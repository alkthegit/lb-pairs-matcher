import PairsMatcher, { PairsMatcherEvents } from "./PairsMatcher.mjs";
import { getItemsMap } from "./cardSets/colorCards8.mjs";
import getItems from "./cardSets/colorCards8.mjs";

const GameStates = {
  NotStarted: "Not started",
  InProgress: "In progress",
  GameOver: "Game over",
  Mismatch: "Mismatch",
  Cheating: "Cheating",
  Showing: "Showing"
};

/**
 * –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
const appState = {
  /**
   * –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
   *
   * @type {GameStates}
   */
  gameState: GameStates.NotStarted,

  /**
   * –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤. –ù—É–∂–Ω–æ —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ GameStats.Showing –∏ –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞ –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫. –ú–µ–Ω—è–µ—Ç—Å—è –Ω–∞ 2 –∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–æ 0 –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è Controller.onItemsMismatch
   *
   * @type {number}
   */
  mismatchCount: 0,

  /**
   * –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ "–°–¥–∞—é—Å—å", —á—Ç–æ–±—ã –Ω–µ –≤—ã–±–∏—Ä–∞—Ç—å —É–∂–µ —É–≥–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–±—ä–µ–∫—Ç—ã
   *
   * @type {number[]}
   */
  matchIds: []
};

/**
 * –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–π–º–µ—Ä
 * @type {number}
 */
let timerInterval = -1;

/**
 * –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
 *
 * @type {Date}
 */
let startTime;

export default class Controller {
  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
   *
   * @param {HTMLDivElement} containerDiv html-—ç–ª–µ–º–µ–Ω—Ç-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   * @param {HTMLDivElement} pairsMatcher –≠–∫–∑–µ–º–ø–ª—è—Ä —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏–≥—Ä—ã (–º–æ–¥–µ–ª—å)
   */
  constructor(containerDiv, pairsMatcher) {
    if (!containerDiv) {
      throw new Error(
        `–î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–µ–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ '${containerDiv}'`
      );
    }

    if (!pairsMatcher) {
      throw new Error(
        `–î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –∫–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã. –ü–µ–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ '${pairsMatcher}'`
      );
    }

    this.containerDiv = containerDiv;
    this.pairsMatcher = pairsMatcher;

    /**
     * –ò–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     *
     * @type {HTMLDivElement}
     * @private
     */
    this.boardElement;

    /**
     * –ù–∞–±–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏
     *
     * @type {HTMLDivElement[]}
     */
    this.itemsElement;

    /**
     * –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
     *
     * @type {HTMLInputElement}
     * @private
     */
    this.timeLabelElement;

    /**
     * –ö–Ω–æ–ø–∫–∞ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
     *
     * @type {HTMLButtonElement}
     * @private
     */
    this.startGemaButtonElement;

    /**
     * –ö–Ω–æ–ø–∫–∞ –°–¥–∞—é—Å—å
     *
     * @type {HTMLButtonElement}
     * @private
     */
    this.giveUpButtonElement;

    /**
     * –¢–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ü–≤–µ—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
     *
     * @private
     */
    this.items = getItems();

    /**
     * –í—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ —Å –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã, –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö —Å —à–∞–≥–æ–º 20 –º—Å
     *
     * @type {number}
     * @private
     */
    this.elapsedTime;
  }

  initialize() {
    this.generateViewElements();
    this.bindViewEventListeners();
    this.bindModelListeners();
    console.log(`Controller initialized`);
  }

  /**
   * –ü–æ—Ä–æ–∂–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   * @param {number} pairsCount –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∏–≥—Ä–µ
   */
  startNewGame() {
    const itemsMap = getItemsMap();
    this.pairsMatcher.newGame(itemsMap).then(itemIds => {
      // console.table(this.items);

      let itemHTML = "";

      // —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ this.items - —Ç–æ –µ—Å—Ç—å "—Ñ–∏–∑–∏—á–µ—Å–∫–∏–π" –æ–±—ä–µ–∫—Ç, —É—á–∞—Å—Ç–≤—É—é—â–∏–π –≤ –∏–≥—Ä–µ –∏ –∏–º–µ—é—â–∏–π —Å–≤–æ–π—Å—Ç–≤–∞ - —Ü–≤–µ—Ç, –∫–∞—Ä—Ç–∏–Ω–∫—É, —Ñ–æ—Ä–º—É –∏ —Ç.–¥.
      let itemGame;

      let itemElementId = "";
      // console.table(this.items);

      this.itemsElement.innerHTML = "";
      // –ø–æ –ø–æ–ª—É—á–µ–Ω–æ–º—É –º–∞—Å—Å–∏–≤—É —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ—Ä–æ–∂–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      itemIds.forEach(itemId => {
        itemGame = this.items.find(item => item.id === itemId);

        itemElementId = `item-${itemGame.id}`;
        itemHTML = `
                        <div class="item facedown" id="${itemElementId}"></div>
                    `;

        this.itemsElement.insertAdjacentHTML("beforeend", itemHTML);
      });

      appState.gameState = GameStates.InProgress;
      appState.matchIds = [];
      console.log("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å");

      // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Å—á–µ—Ç –ø—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ - —Å —à–∞–≥–æ–º 20 –º—Å
      startTime = Date.now();
      this.timeLabelElement.textContent = `00:00.000`;
      timerInterval = setInterval(() => {
        this.elapsedTime = Date.now() - startTime;
        const date = new Date(this.elapsedTime);
        // this.timeLabelElement.textContent = this.elapsedTime;
        const minutes = `0${date.getMinutes().toString()}`.slice(-2);
        const seconds = `0${date.getSeconds().toString()}`.slice(-2);
        const milliseconds = `000${date.getMilliseconds().toString()}`.slice(
          -3
        );
        this.timeLabelElement.value = `${minutes}:${seconds}.${milliseconds}`;
      }, 20);
      this.toggleElementDisabled(this.startGameButtonElement);
    });
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞) —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
   */
  generateViewElements() {
    // –∏–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞
    const boardHTML = `<div class="board"></div>`;
    this.containerDiv.insertAdjacentHTML("afterbegin", boardHTML);
    this.boardElement = this.containerDiv.querySelector(".board");

    // –Ω–∞–±–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤
    const itemsHTML = `<div class="items"></div>`;
    this.boardElement.insertAdjacentHTML("afterbegin", itemsHTML);
    this.itemsElement = this.containerDiv.querySelector(".items");

    let viewHTML;
    // –∫–Ω–æ–ø–∫–∞ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –∏ –ø–æ–ª–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –∏–≥—Ä—ã
    viewHTML = `
            <div class="tools-row">
                <button id="startGame">–ù–æ–≤–∞—è –∏–≥—Ä–∞</button> <input type="text" id="timeLabel" readonly>
            </div>
            <div class="tools-row">
                <button id="giveUp">–°–¥–∞—é—Å—å!</button>
            </div>
        `;
    this.boardElement.insertAdjacentHTML("afterbegin", viewHTML);

    this.startGameButtonElement = this.boardElement.querySelector(`#startGame`);
    this.giveUpButtonElement = this.boardElement.querySelector(`#giveUp`);

    this.timeLabelElement = this.containerDiv.querySelector("#timeLabel");
  }

  /**
   * –ù–∞–∑–Ω–∞—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (—Å–æ–±—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
   *
   * @private
   */
  bindViewEventListeners() {
    this.itemsElement.addEventListener("click", event => {
      // –µ—Å–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      if (appState.gameState === GameStates.GameOver) {
        return;
      }

      // –µ—Å–ª–∏ –∏–¥–µ—Ç –ø–æ–∫–∞–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ö–æ–¥–æ–≤ - —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      if (appState.gameState === GameStates.Cheating) {
        return;
      }

      if (event.target.classList.contains("item")) {
        const itemId = +event.target.id.split("-")[1];
        this.selectItem(itemId);
      }
    });

    let element;
    // –ö–Ω–æ–ø–∫–∞ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
    element = this.boardElement.querySelector("button#startGame");
    element.addEventListener("click", this.onStartGame);

    // –ö–Ω–æ–ø–∫–∞ –°–¥–∞—é—Å—å
    element = this.boardElement.querySelector("button#giveUp");
    element.addEventListener("click", this.onGiveUp);
  }

  /**
   * –ù–∞–∑–Ω–∞—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–µ–ª–∏
   *
   * @private
   */
  bindModelListeners(){
    this.pairsMatcher.on(PairsMatcherEvents.Active, this.onItemActivate);
    this.pairsMatcher.on(PairsMatcherEvents.Match, this.onItemsMatch);
    this.pairsMatcher.on(PairsMatcherEvents.Mismatch, this.onItemsMismatch);
    this.pairsMatcher.on(PairsMatcherEvents.GameOver, this.onGameOver);
  };

  /**
   * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤—ã–±—Ä–∞–Ω"
   * @param {number} id id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
   */
  selectItem(id) {
    this.pairsMatcher.selectItem(id);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "–æ–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
   *
   * @private
   */
  onItemActivate = (itemId) => {
    console.log("Event: active");

    // –ø–æ–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
    this.setItemActivated(itemId);

    // –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–¥–∞—é—Å—å –ø–æ–∫–∞ –Ω–µ —Ö–∞–≤–µ—Ä—à–µ–Ω —Ö–æ–¥
    this.toggleElementDisabled(this.giveUpButtonElement, true);
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ!"
   *
   * @private
   */
  onItemsMatch = (itemIds) => {
    console.log(`Event: match üòÑ`);

    // –ø–æ–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∫ —É–≥–∞–¥–∞–Ω–Ω—ã–µ
    this.setItemsMatch(itemIds);

    // –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–¥–∞—é—Å—å
    this.toggleElementDisabled(this.giveUpButtonElement, false);
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!"
   *
   * @private
   */
  onItemsMismatch = (itemIds) => {
    console.log(`Event: mismatch üòî`);

    // –ø–æ–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∫ –Ω–µ—É–≥–∞–¥–∞–Ω–Ω—ã–µ
    this.setItemsMismatch(itemIds);

    // –≤–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–¥–∞—é—Å—å
    this.toggleElementDisabled(this.giveUpButtonElement, false);
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "–∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞"
   *
   * @private
   */
  onGameOver = (gameStats) => {
    clearInterval(timerInterval);

    console.log(`Event: you win üòé`);
    appState.gameState = GameStates.GameOver;

    const gameTime = this.timeLabelElement.value;

    /* –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–æ–≤–æ–π –¥–∏–Ω–∞–º–∏–∫–∏ */
    const interval = setInterval(() => {
      console.log(appState.gameState);
      if (appState.gameState !== GameStates.GameOver) {
        return;
      }
      clearInterval(interval);
      console.log(`alert`);
      alert(
        `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n\n\n   –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: ${gameTime}\n   –°–¥–µ–ª–∞–Ω–æ —Ö–æ–¥–æ–≤: ${
          gameStats.tries
        }`
      );
    }, 100);

    this.toggleElementDisabled(this.startGameButtonElement);
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "–ö–Ω–æ–ø–∫–∞ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –Ω–∞–∂–∞—Ç–∞"
   *
   * @private
   */
  onStartGame = () => {
    this.startNewGame();
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "–ö–Ω–æ–ø–∫–∞ –°–¥–∞—é—Å—å –Ω–∞–∂–∞—Ç–∞"
   *
   * @private
   */
  onGiveUp = () => {
    if (appState.gameState !== GameStates.InProgress) {
      return;
    }

    appState.gameState = GameStates.Cheating;
    const winStrategy = this.pairsMatcher.getWinStrategy();
    winStrategy
      // –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—É–≥–∞–¥–∞–Ω–Ω—ã–µ
      .filter(e => !appState.matchIds.includes(e.id))
      //–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏—Ö –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
      .forEach((e, i) => {
        setTimeout(() => {
          this.selectItem(e.id);
        }, i * 200);
      });
  };

  /**
   * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∫–∞–∑–∞ –Ω–µ—Å–æ–≤–ø–∞–≤—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
   * –ü—Ä–∏ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –æ–Ω–∏ –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —Ç–∞–π–º–µ—Ä—É.
   * –î–æ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω–∏ –æ–±–∞ "–∞–∫—Ç–∏–≤–Ω—ã" (–≤–∏–¥–Ω—ã, —Å–ª—ã—à–Ω—ã –∏ —Ç.–¥. - –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤), –∏–≥—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ GameStates.Showing –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–ª—å–∑—è.
   * –ü–æ –º–µ—Ä–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - "–Ω–µ —É–≥–∞–¥–∞–Ω–æ", –∏–≥—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GameStates.InProgress –∏ –ø—Ä–æ—á–∏–µ –æ–±—ä–µ–∫—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.
   *
   * @private
   */
  toggleVisibleMismatchItemsCount = () => {
    appState.mismatchCount--;
    if (appState.mismatchCount === 0) {
      appState.gameState = GameStates.InProgress;
    }
  };

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–æ–∫ –≤ –∏–≥—Ä–µ)
   *
   * @param {HTMLElement} element –≠–ª–µ–º–µ–Ω—Ç, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å
   * @param {boolean} enabled –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ - –≤—ã–∫–ª—é—á–µ–Ω (true) –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω (false). –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–ª–æ–ª–æ–∂–Ω–æ–µ
   * @private
   */
  toggleElementDisabled = (element, disabled) => {
    if (typeof disabled === "undefined") {
      if (!element.getAttribute("disabled")) {
        element.setAttribute("disabled", "true");
      } else {
        element.removeAttribute("disabled");
      }
    } else {
      if (disabled) {
        element.setAttribute("disabled", `true`);
      } else {
        element.removeAttribute("disabled");
      }
    }
  };

  /**
   * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
   *
   * @private
   */
  setItemActivated = (itemId) => {
    let itemElement = this.itemsElement.querySelector(`#item-${itemId}`);
    itemElement.classList.remove("facedown");
    itemElement.classList.add("faceup");
    itemElement.style.backgroundColor = this.items.find(
      e => e.id === itemId
    ).color;
  };

  /**
   * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–µ —É–≥–∞–¥–∞–Ω–æ".
   *
   * @private
   */
  setItemsMismatch = (itemIds) => {
    appState.mismatchCount = 2;
    appState.gameState = GameStates.Showing;

    setTimeout(() => {
      this.items
        .filter(item => itemIds.includes(item.id))
        .map(item => item.id)
        .forEach(itemId => {
          const itemElement = this.itemsElement.querySelector(
            `#item-${itemId}`
          );
          itemElement.classList.remove("faceup");
          itemElement.style.backgroundColor = "";
          itemElement.classList.add("facedown");
          this.toggleVisibleMismatchItemsCount();
        });
    }, 800);
  };

  /**
   * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—É–≥–∞–¥–∞–Ω–æ".
   *
   * @private
   */
  setItemsMatch = (itemIds) => {
    this.items
      .filter(item => itemIds.includes(item.id))
      .map(item => item.id)
      .forEach(itemId => {
        let itemElement = this.itemsElement.querySelector(`#item-${itemId}`);
        itemElement.classList.remove("faceup");
        itemElement.classList.remove("facedown");
        itemElement.classList.add("match");
        itemElement.style.backgroundColor = this.items.find(
          e => e.id === itemId
        ).color;

        // –¥–æ–±–∞–≤–ª—è–µ–º id —É–≥–∞–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö
        appState.matchIds.push(itemId);
      });
  };
}
