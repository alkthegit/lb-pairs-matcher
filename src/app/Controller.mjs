import PairsMatcher, { PairsMatcherEvents } from "./PairsMatcher.mjs";
import { getItemsMap } from "./cardSets/colorCards8.mjs";
import getItems from "./cardSets/colorCards8.mjs";
const GameStates = {
    NotStarted: 'Not started',
    InProgress: 'In progress',
    GameOver: 'Game over',
    Mismatch: 'Mismatch'
}

const appState = {
    gameState: GameStates.NotStarted
}

/**
 * –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–π–º–µ—Ä
 * @type {number}
 */
let timerInterval = -1;

/**
 * –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
 * 
 * @type {Date}
 */
let startTime;

export default class Controller {
    /**
     * –≠–ª–µ–º–µ—Ç-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ó–∞–¥–∞–µ—Ç—Å—è –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
     * 
     * @type {HTMLDivElement}
     * @private
     */
    containerDiv;

    /**
     * –≠–∫–∑–µ–º–ø–ª—è—Ä —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏–≥—Ä—ã (–º–æ–¥–µ–ª—å)
     * 
     * @type {PairsMatcher} 
     * @private
     */
    pairsMatcher;

    /**
     * –ò–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * 
     * @type {HTMLDivElement}     * 
     * @private
     */
    boardElement;

    /**
     * –ù–∞–±–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏
     * 
     * @type {HTMLDivElement[]}
     */
    itemsElement;

    /**
     * –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
     * 
     * @type {HTMLInputElement}
     * @private
     */
    timeLabelElement

    /**
     * –¢–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –∏–≥—Ä—ã. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ü–≤–µ—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
     * 
     * @private
     */
    items = getItems();

    /**
     * –í—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ —Å –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã, –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö —Å —à–∞–≥–æ–º 20 –º—Å
     * 
     * @type {number}
     * @private
     */
    elapsedTime;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
     * 
     * @param {HTMLDivElement} containerDiv html-—ç–ª–µ–º–µ–Ω—Ç-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param {HTMLDivElement} pairsMatcher –≠–∫–∑–µ–º–ø–ª—è—Ä —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏–≥—Ä—ã (–º–æ–¥–µ–ª—å)
     */
    constructor(containerDiv, pairsMatcher) {
        if (!containerDiv) {
            throw new Error(`–î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–µ–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ '${containerDiv}'`);
        }

        if (!pairsMatcher) {
            throw new Error(`–î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –∫–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã. –ü–µ–¥–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ '${pairsMatcher}'`);
        }

        this.containerDiv = containerDiv;
        this.pairsMatcher = pairsMatcher;

        this.generateViewElements();
        this.bindViewEventListeners();
        // this.startNewGame();
        // console.table(this.items);
        console.log(`Controller initialized`);
    }

    /**
     * –ü–æ—Ä–æ–∂–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param {number} pairsCount –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∏–≥—Ä–µ
     */
    startNewGame() {
        const itemsMap = getItemsMap();
        this.pairsMatcher.newGame2(itemsMap)
            .then((itemIds) => {
                // console.table(this.items);

                let itemHTML = '';

                // —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ this.items - —Ç–æ –µ—Å—Ç—å "—Ñ–∏–∑–∏—á–µ—Å–∫–∏–π" –æ–±—ä–µ–∫—Ç, —É—á–∞—Å—Ç–≤—É—é—â–∏–π –≤ –∏–≥—Ä–µ –∏ –∏–º–µ—é—â–∏–π —Å–≤–æ–π—Å—Ç–≤–∞ - —Ü–≤–µ—Ç, –∫–∞—Ä—Ç–∏–Ω–∫—É, —Ñ–æ—Ä–º—É –∏ —Ç.–¥.
                let itemGame;

                let itemElementId = '';
                // console.table(this.items);

                this.itemsElement.innerHTML = "";
                // –ø–æ –ø–æ–ª—É—á–µ–Ω–æ–º—É –º–∞—Å—Å–∏–≤—É —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ—Ä–æ–∂–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                itemIds.forEach((itemId) => {
                    itemGame = this.items.find(item => item.id === itemId);

                    itemElementId = `item-${itemGame.id}`;
                    itemHTML = `
                        <div class="item facedown" id="${itemElementId}"></div>
                    `;

                    this.itemsElement.insertAdjacentHTML('beforeend', itemHTML);
                });

                this.pairsMatcher.on(PairsMatcherEvents.Active, (itemId) => {
                    console.log('Event: active');
                    // –ø–æ–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
                    let itemElement = this.itemsElement.querySelector(`#item-${itemId}`);
                    itemElement.classList.remove('facedown');
                    itemElement.classList.add('faceup');
                    itemElement.style.backgroundColor = this.items.find((e) => e.id === itemId).color;
                });

                this.pairsMatcher.on(PairsMatcherEvents.Match, (itemIds) => {
                    console.log(`Event: match üòÑ`);
                    this.items
                        .filter(item => itemIds.includes(item.id))
                        .map(item => item.id)
                        .forEach(itemId => {
                            let itemElement = this.itemsElement.querySelector(`#item-${itemId}`);
                            // setTimeout(100, () => {
                            itemElement.classList.remove('faceup');
                            itemElement.classList.remove('facedown');
                            itemElement.classList.add('match');
                            itemElement.style.backgroundColor = this.items.find((e) => e.id === itemId).color
                            // });
                        })
                });

                this.pairsMatcher.on(PairsMatcherEvents.Mismatch, (itemIds) => {
                    console.log(`Event: mismatch üòî`);
                    setTimeout(() => {
                        this.items
                            .filter(item => itemIds.includes(item.id))
                            .map(item => item.id)
                            .forEach(itemId => {
                                const itemElement = this.itemsElement.querySelector(`#item-${itemId}`);
                                itemElement.classList.remove('faceup');
                                itemElement.style.backgroundColor = '';
                                itemElement.classList.add('facedown');
                            });
                    }, 800);
                });

                this.pairsMatcher.on(PairsMatcherEvents.GameOver, (gameStats) => {
                    clearInterval(timerInterval);

                    console.log(`You win üòé`);
                    appState.gameState = GameStates.GameOver;

                    const gameTime = this.timeLabelElement.value;
                    alert(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n\n\n   –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: ${gameTime}\n   –°–¥–µ–ª–∞–Ω–æ —Ö–æ–¥–æ–≤: ${gameStats.tries}`);
                });

                appState.gameState = GameStates.InProgress;
                console.log('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å');

                // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Å—á–µ—Ç –ø—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ - —Å —à–∞–≥–æ–º 20 –º—Å
                startTime = Date.now();
                this.timeLabelElement.textContent = `00:00.000`;
                timerInterval = setInterval(() => {
                    this.elapsedTime = Date.now() - startTime;
                    const date = new Date(this.elapsedTime);
                    // this.timeLabelElement.textContent = this.elapsedTime;
                    const minutes = `0${date.getMinutes().toString()}`.slice(-2);
                    const seconds = `0${date.getSeconds().toString()}`.slice(-2);
                    const milliseconds = `000${date.getMilliseconds().toString()}`.slice(-3);
                    this.timeLabelElement.value = `${minutes}:${seconds}.${milliseconds}`;
                }, 20);
            });
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞) —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
     */
    generateViewElements() {
        // –∏–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞
        const boardHTML = `<div class="board"></div>`;
        this.containerDiv.insertAdjacentHTML("afterbegin", boardHTML);
        this.boardElement = this.containerDiv.querySelector(".board");

        // –Ω–∞–±–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤
        const itemsHTML = `<div class="items"></div>`;
        this.boardElement.insertAdjacentHTML("afterbegin", itemsHTML);
        this.itemsElement = this.containerDiv.querySelector('.items');

        let viewHTML;
        // –∫–Ω–æ–ø–∫–∞ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –∏ –ø–æ–ª–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –∏–≥—Ä—ã
        viewHTML = `
            <button>–ù–æ–≤–∞—è –∏–≥—Ä–∞</button> <input type="text" id="timeLabel" readonly>
        `;
        this.boardElement.insertAdjacentHTML('afterbegin', viewHTML);
        this.timeLabelElement = this.containerDiv.querySelector('#timeLabel');
    }

    /**
     * –ù–∞–∑–Ω–∞—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (—Å–æ–±—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
     * @private
     */
    bindViewEventListeners() {
        this.itemsElement.addEventListener('click', (event) => {
            // –µ—Å–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if (appState.gameState === GameStates.GameOver) {
                return;
            }

            if (event.target.classList.contains('item')) {
                const itemId = +event.target.id.split('-')[1];
                this.selectItem(itemId);
            }
        });

        const buttonElement = this.boardElement.querySelector('button');
        buttonElement.addEventListener('click', () => {
            this.startNewGame();
        });
    }

    /**
     * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤—ã–±—Ä–∞–Ω"
     * @param {number} id id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
     */
    selectItem(id) {
        this.pairsMatcher.selectItem(id);
    }
}